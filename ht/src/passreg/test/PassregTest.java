package passreg.test;
// Generated by ComTest BEGIN
import java.io.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
import passreg.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.04 16:22:02 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class PassregTest {



  // Generated by ComTest BEGIN
  /** testGetPaasytLkm86 */
  @Test
  public void testGetPaasytLkm86() {    // Passreg: 86
    Passreg pg = new Passreg(); 
    assertEquals("From: Passreg line: 88", 0, pg.getPaasytLkm()); 
    Paasy gmail1 = new Paasy(); 
    gmail1.rekisteroi(); 
    gmail1.taytaGmailTiedoilla(); 
    pg.lisaa(gmail1); 
    assertEquals("From: Passreg line: 95", 1, pg.getPaasytLkm()); 
    Paasy gmail2 = new Paasy(); 
    gmail2.rekisteroi(); 
    gmail2.taytaGmailTiedoilla(); 
    pg.lisaa(gmail2); 
    assertEquals("From: Passreg line: 102", 2, pg.getPaasytLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testLisaa128 */
  @Test
  public void testLisaa128() {    // Passreg: 128
    Passreg passreg = new Passreg(); 
    Paasy p1 = new Paasy(); 
    p1.taytaGmailTiedoilla(); 
    p1.rekisteroi(); 
    assertEquals("From: Passreg line: 133", 0, passreg.getPaasytLkm()); 
    passreg.lisaa(p1); 
    assertEquals("From: Passreg line: 135", 1, passreg.getPaasytLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testLisaa145 */
  @Test
  public void testLisaa145() {    // Passreg: 145
    Passreg passreg = new Passreg(); 
    Kategoria k1 = new Kategoria("some"); 
    k1.rekisteroi(); 
    Kategoria k2 = new Kategoria("opiskelu"); 
    k2.rekisteroi(); 
    Kategoria k3 = new Kategoria("työ"); 
    k3.rekisteroi(); 
    assertEquals("From: Passreg line: 153", 0, passreg.getKategoriatLkm()); 
    try {
    passreg.annaKategoria(0); 
    fail("Passreg: 154 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    passreg.lisaa(k1); 
    assertEquals("From: Passreg line: 156", 1, passreg.getKategoriatLkm()); 
    assertEquals("From: Passreg line: 157", "some", passreg.annaKategoria(0).getNimi()); 
    passreg.lisaa(k2); 
    assertEquals("From: Passreg line: 159", 2, passreg.getKategoriatLkm()); 
    assertEquals("From: Passreg line: 160", "opiskelu", passreg.annaKategoria(1).getNimi()); 
    passreg.lisaa(k3); 
    assertEquals("From: Passreg line: 162", 3, passreg.getKategoriatLkm()); 
    assertEquals("From: Passreg line: 163", "työ", passreg.annaKategoria(2).getNimi()); 
    try {
    passreg.annaKategoria(3); 
    fail("Passreg: 164 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testLueTiedostosta215 */
  @Test
  public void testLueTiedostosta215() {    // Passreg: 215
    Passreg regis = new Passreg(); 
    Kategoria k1 = new Kategoria("opiskelu"); k1.rekisteroi(); 
    Kategoria k2 = new Kategoria("viihde"); k2.rekisteroi(); 
    int n1 = k1.getTunnusNro(); 
    int n2 = k2.getTunnusNro(); 
    Paasy p1 = new Paasy(n1); p1.aseta(1, "gmail1"); 
    Paasy p2 = new Paasy(n2); p2.aseta(1, "gmail2"); 
    Paasy p3 = new Paasy(n2); p3.aseta(1, "gmail3"); 
    Paasy p4 = new Paasy(n1); p4.aseta(1, "gmail4"); 
    Paasy p5 = new Paasy(n2); p5.aseta(1, "gmail5"); 
    String hakemisto = "testi"; 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    regis.lueTiedostosta(hakemisto); 
    regis.lisaa(p1); 
    regis.lisaa(p2); 
    regis.lisaa(p3); 
    regis.lisaa(k1); 
    regis.lisaa(p4); 
    regis.lisaa(k2); 
    regis.lisaa(p5); 
    regis.tallenna(); 
    List<Paasy> pst = regis.getPaasyt(n1); 
    Iterator<Paasy> it = pst.iterator(); 
    assertEquals("From: Passreg line: 242", p1, it.next()); 
    assertEquals("From: Passreg line: 243", p4, it.next()); 
    assertEquals("From: Passreg line: 244", false, it.hasNext()); 
    List<Paasy> loytyneet = regis.getPaasyt(n2); 
    Iterator<Paasy> ih = loytyneet.iterator(); 
    assertEquals("From: Passreg line: 247", true, ih.hasNext()); 
    assertEquals("From: Passreg line: 248", p2, ih.next()); 
    assertEquals("From: Passreg line: 249", p3, ih.next()); 
    assertEquals("From: Passreg line: 250", true, ih.hasNext()); 
    assertEquals("From: Passreg line: 251", p5, ih.next()); 
    try {
    ih.next(); 
    fail("Passreg: 252 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetPaasyt285 */
  @Test
  public void testGetPaasyt285() {    // Passreg: 285
    Passreg pss = new Passreg(); 
    Kategoria k = new Kategoria(); 
    int n = k.getTunnusNro(); 
    pss.lisaa(k); 
    Paasy p1 = new Paasy(n); p1.taytaGmailTiedoilla(); 
    Paasy p2 = new Paasy(n); p2.taytaGmailTiedoilla(); 
    Paasy p3 = new Paasy(n+1); p3.taytaGmailTiedoilla(); 
    pss.lisaa(p1); pss.lisaa(p2); pss.lisaa(p3); 
    List<Paasy> pst = pss.getPaasyt(n); 
    Iterator<Paasy> i = pst.iterator(); 
    Paasy p = i.next(); 
    assertEquals("From: Passreg line: 298", true, (p == p1 || p == p2)); 
    assertEquals("From: Passreg line: 299", true, i.hasNext()); 
    i.next(); 
    assertEquals("From: Passreg line: 301", false, i.hasNext()); 
    try {
    i.next(); 
    fail("Passreg: 302 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END
}